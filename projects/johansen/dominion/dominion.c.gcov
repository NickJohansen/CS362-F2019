        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        6:    8:int baronCardEffect(int choice1, struct gameState *state)
        -:    9:{
        6:   10:	int currentPlayer = whoseTurn(state);
        -:   11:
        6:   12:	state->numBuys++;//Increase buys by 1!
        6:   13:	if (choice1 > 0) { //Boolean true or going to discard an estate
        4:   14:		int p = 0;//Iterator for hand!
        4:   15:		int card_not_discarded = 1;//Flag for discard set!
       14:   16:		while (card_not_discarded) {
        6:   17:			if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
        -:   18:
        -:   19:				//BUG ADDED: Changed the number of coins added from 4 to 2, which is half of the correct amount.
        4:   20:				state->coins += 2;//Add 4 coins to the amount of coins
        4:   21:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        4:   22:				state->discardCount[currentPlayer]++;
        6:   23:				for (; p < state->handCount[currentPlayer]; p++) {
        2:   24:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:   25:				}
        4:   26:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        4:   27:				state->handCount[currentPlayer]--;
        4:   28:				card_not_discarded = 0;//Exit the loop
        -:   29:			}
        2:   30:			else if (p > state->handCount[currentPlayer]) {
        -:   31:				if (DEBUG) {
        -:   32:					printf("No estate cards in your hand, invalid choice\n");
        -:   33:					printf("Must gain an estate if there are any\n");
        -:   34:				}
    #####:   35:				if (supplyCount(estate, state) > 0) {
    #####:   36:					gainCard(estate, state, 0, currentPlayer);
        -:   37:
    #####:   38:					state->supplyCount[estate]--;//Decrement estates
    #####:   39:					if (supplyCount(estate, state) == 0) {
    #####:   40:						isGameOver(state);
        -:   41:					}
        -:   42:				}
    #####:   43:				card_not_discarded = 0;//Exit the loop
        -:   44:			}
        -:   45:
        -:   46:			else {
        2:   47:				p++;//Next card
        -:   48:			}
        -:   49:		}
        -:   50:	}
        -:   51:
        -:   52:	else {
        2:   53:		if (supplyCount(estate, state) > 0) {
        -:   54:
        -:   55:			//BUG ADDED: Commented out the call to gainCard function, so the current player
        -:   56:			//does not correctly gain an estate card like they should.
        -:   57:
        -:   58:			//gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:   59:
        2:   60:			state->supplyCount[estate]--;//Decrement Estates
        2:   61:			if (supplyCount(estate, state) == 0) {
    #####:   62:				isGameOver(state);
        -:   63:			}
        -:   64:		}
        -:   65:	}
        -:   66:
        -:   67:
        6:   68:	return 0;
        -:   69:}
        -:   70:
        4:   71:int minionCardEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -:   72:{
        -:   73:	int i;
        -:   74:	int j;
        4:   75:	int currentPlayer = whoseTurn(state);
        -:   76:
        -:   77:	//+1 action
        4:   78:	state->numActions++;
        -:   79:
        -:   80:	//discard card from hand
        4:   81:	discardCard(handPos, currentPlayer, state, 0);
        -:   82:
        -:   83:	//BUG ADDED: Changed the number of coins gained from 2 to 4, twice the correct amount.
        4:   84:	if (choice1)
        -:   85:	{
        2:   86:		state->coins = state->coins + 4;
        -:   87:	}
        2:   88:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:   89:	{
        -:   90:		//discard hand
    #####:   91:		while (numHandCards(state) > 0)
        -:   92:		{
    #####:   93:			discardCard(handPos, currentPlayer, state, 0);
        -:   94:		}
        -:   95:
        -:   96:		//draw 4
        -:   97:		//BUG ADDED: Changed the number of cards drawn from 4 to 2, half of the correct amount.
    #####:   98:		for (i = 0; i < 2; i++)
        -:   99:		{
    #####:  100:			drawCard(currentPlayer, state);
        -:  101:		}
        -:  102:
        -:  103:		//other players discard hand and redraw if hand size > 4
    #####:  104:		for (i = 0; i < state->numPlayers; i++)
        -:  105:		{
    #####:  106:			if (i != currentPlayer)
        -:  107:			{
    #####:  108:				if (state->handCount[i] > 4)
        -:  109:				{
        -:  110:					//discard hand
    #####:  111:					while (state->handCount[i] > 0)
        -:  112:					{
    #####:  113:						discardCard(handPos, i, state, 0);
        -:  114:					}
        -:  115:
        -:  116:					//draw 4
    #####:  117:					for (j = 0; j < 4; j++)
        -:  118:					{
    #####:  119:						drawCard(i, state);
        -:  120:					}
        -:  121:				}
        -:  122:			}
        -:  123:		}
        -:  124:
        -:  125:	}
        4:  126:	return 0;
        -:  127:}
        -:  128:
       10:  129:int ambassadorCardEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -:  130:{
        -:  131:	int i;
        -:  132:	int j;
       10:  133:	int currentPlayer = whoseTurn(state);
        -:  134:
       10:  135:	j = 0;		//used to check if player has enough cards to discard
        -:  136:
       10:  137:	if (choice2 > 2 || choice2 < 0)
        -:  138:	{
    #####:  139:		return -1;
        -:  140:	}
        -:  141:
       10:  142:	if (choice1 == handPos)
        -:  143:	{
        2:  144:		return -1;
        -:  145:	}
        -:  146:
       20:  147:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  148:	{
       12:  149:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  150:		{
        -:  151:			//BUG ADDED: Changed j to decrement by 1 each loop rather than increment, so the function
        -:  152:			//always ends (returns) in the next if statement.
    #####:  153:			j--;
        -:  154:		}
        -:  155:	}
        8:  156:	if (j < choice2)
        -:  157:	{
    #####:  158:		return -1;
        -:  159:	}
        -:  160:
        -:  161:	if (DEBUG)
        -:  162:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  163:
        -:  164:	//increase supply count for choosen card by amount being discarded
        8:  165:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  166:
        -:  167:	//each other player gains a copy of revealed card
       24:  168:	for (i = 0; i < state->numPlayers; i++)
        -:  169:	{
       16:  170:		if (i != currentPlayer)
        -:  171:		{
        8:  172:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  173:		}
        -:  174:	}
        -:  175:
        -:  176:	//discard played card from hand
        -:  177:	//BUG ADDED: Commented out the call to discardCard, so the played card remains in the player's hand.
        -:  178://	discardCard(handPos, currentPlayer, state, 0);
        -:  179:
        -:  180:	//trash copies of cards returned to supply
        8:  181:	for (j = 0; j < choice2; j++)
        -:  182:	{
    #####:  183:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  184:		{
    #####:  185:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  186:			{
    #####:  187:				discardCard(i, currentPlayer, state, 1);
    #####:  188:				break;
        -:  189:			}
        -:  190:		}
        -:  191:	}
        -:  192:
        8:  193:	return 0;
        -:  194:}
        -:  195:
        4:  196:int tributeCardEffect(struct gameState *state)
        -:  197:{
        -:  198:	int i;
        4:  199:	int currentPlayer = whoseTurn(state);
        4:  200:	int nextPlayer = currentPlayer + 1;
        4:  201:	int tributeRevealedCards[2] = { -1, -1 };
        -:  202:
        4:  203:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  204:		nextPlayer = 0;
        -:  205:	}
        -:  206:
        4:  207:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
        2:  208:		if (state->deckCount[nextPlayer] > 0) {
    #####:  209:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        -:  210:			//BUG ADDED: Changed the deckCount of nextPlayer to increase rather than decrease,
        -:  211:			//causing problems with the deck count of the players.
    #####:  212:			state->deckCount[nextPlayer]++;
        -:  213:		}
        2:  214:		else if (state->discardCount[nextPlayer] > 0) {
        2:  215:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        2:  216:			state->discardCount[nextPlayer]--;
        -:  217:		}
        -:  218:		else {
        -:  219:			//No Card to Reveal
        -:  220:			if (DEBUG) {
        -:  221:				printf("No cards to reveal\n");
        -:  222:			}
        -:  223:		}
        -:  224:	}
        -:  225:
        -:  226:	else {
        2:  227:		if (state->deckCount[nextPlayer] == 0) {
    #####:  228:			for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  229:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  230:				state->deckCount[nextPlayer]++;
    #####:  231:				state->discard[nextPlayer][i] = -1;
    #####:  232:				state->discardCount[nextPlayer]--;
        -:  233:			}
        -:  234:
    #####:  235:			shuffle(nextPlayer, state);//Shuffle the deck
        -:  236:		}
        2:  237:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        2:  238:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2:  239:		state->deckCount[nextPlayer]--;
        2:  240:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        2:  241:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2:  242:		state->deckCount[nextPlayer]--;
        -:  243:	}
        -:  244:
        4:  245:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
    #####:  246:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  247:		state->playedCardCount++;
    #####:  248:		tributeRevealedCards[1] = -1;
        -:  249:	}
        -:  250:
       16:  251:	for (i = 0; i <= 2; i++) {
       12:  252:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
        -:  253:			//BUG ADDED: If a treasure card is revealed, the player gains 0 coins instead of 2.
        2:  254:			state->coins += 0;
        -:  255:		}
        -:  256:
       10:  257:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
        2:  258:			drawCard(currentPlayer, state);
        2:  259:			drawCard(currentPlayer, state);
        -:  260:		}
        -:  261:		else { //Action Card
        8:  262:			state->numActions = state->numActions + 2;
        -:  263:		}
        -:  264:	}
        -:  265:
        4:  266:	return 0;
        -:  267:}
        -:  268:
        4:  269:int mineCardEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -:  270:{
        -:  271:	int i;
        -:  272:	int j;
        4:  273:	int currentPlayer = whoseTurn(state);
        -:  274:
        4:  275:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  276:
        4:  277:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  278:	{
        2:  279:		return -1;
        -:  280:	}
        -:  281:
        -:  282:	//BUG ADDED: Commented out this if statement so that it is no longer checked as part of the function.
        -:  283:	//if (choice2 > treasure_map || choice2 < curse)
        -:  284:	//{
        -:  285:	//	return -1;
        -:  286:	//}
        -:  287:
        2:  288:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  289:	{
        2:  290:		return -1;
        -:  291:	}
        -:  292:
    #####:  293:	gainCard(choice2, state, 2, currentPlayer);
        -:  294:
        -:  295:	//discard card from hand
        -:  296:	//BUG ADDED: Commented out the call to discardCard so that the player no longer has to discard 
        -:  297:	//a treasure card in order to gain one.
        -:  298:
        -:  299:	//discardCard(handPos, currentPlayer, state, 0);
        -:  300:
        -:  301:	//discard trashed card
    #####:  302:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  303:	{
    #####:  304:		if (state->hand[currentPlayer][i] == j)
        -:  305:		{
    #####:  306:			discardCard(i, currentPlayer, state, 0);
    #####:  307:			break;
        -:  308:		}
        -:  309:	}
        -:  310:
    #####:  311:	return 0;
        -:  312:}
        -:  313:
      720:  314:int compare(const void* a, const void* b) {
      720:  315:    if (*(int*)a > *(int*)b)
    #####:  316:        return 1;
      720:  317:    if (*(int*)a < *(int*)b)
      192:  318:        return -1;
      528:  319:    return 0;
        -:  320:}
        -:  321:
    #####:  322:struct gameState* newGame() {
    #####:  323:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:  324:    return g;
        -:  325:}
        -:  326:
    #####:  327:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  328:                  int k8, int k9, int k10) {
    #####:  329:    int* k = malloc(10 * sizeof(int));
    #####:  330:    k[0] = k1;
    #####:  331:    k[1] = k2;
    #####:  332:    k[2] = k3;
    #####:  333:    k[3] = k4;
    #####:  334:    k[4] = k5;
    #####:  335:    k[5] = k6;
    #####:  336:    k[6] = k7;
    #####:  337:    k[7] = k8;
    #####:  338:    k[8] = k9;
    #####:  339:    k[9] = k10;
    #####:  340:    return k;
        -:  341:}
        -:  342:
       24:  343:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  344:                   struct gameState *state) {
        -:  345:    int i;
        -:  346:    int j;
        -:  347:    int it;
        -:  348:
        -:  349:    //set up random number generator
       24:  350:    SelectStream(1);
       24:  351:    PutSeed((long)randomSeed);
        -:  352:
        -:  353:    //check number of players
       24:  354:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  355:    {
    #####:  356:        return -1;
        -:  357:    }
        -:  358:
        -:  359:    //set number of players
       24:  360:    state->numPlayers = numPlayers;
        -:  361:
        -:  362:    //check selected kingdom cards are different
      264:  363:    for (i = 0; i < 10; i++)
        -:  364:    {
     2640:  365:        for (j = 0; j < 10; j++)
        -:  366:        {
     2400:  367:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  368:            {
    #####:  369:                return -1;
        -:  370:            }
        -:  371:        }
        -:  372:    }
        -:  373:
        -:  374:
        -:  375:    //initialize supply
        -:  376:    ///////////////////////////////
        -:  377:
        -:  378:    //set number of Curse cards
       24:  379:    if (numPlayers == 2)
        -:  380:    {
       24:  381:        state->supplyCount[curse] = 10;
        -:  382:    }
    #####:  383:    else if (numPlayers == 3)
        -:  384:    {
    #####:  385:        state->supplyCount[curse] = 20;
        -:  386:    }
        -:  387:    else
        -:  388:    {
    #####:  389:        state->supplyCount[curse] = 30;
        -:  390:    }
        -:  391:
        -:  392:    //set number of Victory cards
       24:  393:    if (numPlayers == 2)
        -:  394:    {
       24:  395:        state->supplyCount[estate] = 8;
       24:  396:        state->supplyCount[duchy] = 8;
       24:  397:        state->supplyCount[province] = 8;
        -:  398:    }
        -:  399:    else
        -:  400:    {
    #####:  401:        state->supplyCount[estate] = 12;
    #####:  402:        state->supplyCount[duchy] = 12;
    #####:  403:        state->supplyCount[province] = 12;
        -:  404:    }
        -:  405:
        -:  406:    //set number of Treasure cards
       24:  407:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  408:    state->supplyCount[silver] = 40;
       24:  409:    state->supplyCount[gold] = 30;
        -:  410:
        -:  411:    //set number of Kingdom cards
      504:  412:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  413:    {
     3960:  414:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  415:        {
     3720:  416:            if (kingdomCards[j] == i)
        -:  417:            {
        -:  418:                //check if card is a 'Victory' Kingdom card
      240:  419:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  420:                {
       96:  421:                    if (numPlayers == 2) {
       48:  422:                        state->supplyCount[i] = 8;
        -:  423:                    }
        -:  424:                    else {
    #####:  425:                        state->supplyCount[i] = 12;
        -:  426:                    }
        -:  427:                }
        -:  428:                else
        -:  429:                {
      192:  430:                    state->supplyCount[i] = 10;
        -:  431:                }
      240:  432:                break;
        -:  433:            }
        -:  434:            else    //card is not in the set choosen for the game
        -:  435:            {
     3480:  436:                state->supplyCount[i] = -1;
        -:  437:            }
        -:  438:        }
        -:  439:
        -:  440:    }
        -:  441:
        -:  442:    ////////////////////////
        -:  443:    //supply intilization complete
        -:  444:
        -:  445:    //set player decks
       72:  446:    for (i = 0; i < numPlayers; i++)
        -:  447:    {
       48:  448:        state->deckCount[i] = 0;
      192:  449:        for (j = 0; j < 3; j++)
        -:  450:        {
      144:  451:            state->deck[i][j] = estate;
      144:  452:            state->deckCount[i]++;
        -:  453:        }
      384:  454:        for (j = 3; j < 10; j++)
        -:  455:        {
      336:  456:            state->deck[i][j] = copper;
      336:  457:            state->deckCount[i]++;
        -:  458:        }
        -:  459:    }
        -:  460:
        -:  461:    //shuffle player decks
       72:  462:    for (i = 0; i < numPlayers; i++)
        -:  463:    {
       48:  464:        if ( shuffle(i, state) < 0 )
        -:  465:        {
    #####:  466:            return -1;
        -:  467:        }
        -:  468:    }
        -:  469:
        -:  470:    //draw player hands
       72:  471:    for (i = 0; i < numPlayers; i++)
        -:  472:    {
        -:  473:        //initialize hand size to zero
       48:  474:        state->handCount[i] = 0;
       48:  475:        state->discardCount[i] = 0;
        -:  476:        //draw 5 cards
        -:  477:        // for (j = 0; j < 5; j++)
        -:  478:        //	{
        -:  479:        //	  drawCard(i, state);
        -:  480:        //	}
        -:  481:    }
        -:  482:
        -:  483:    //set embargo tokens to 0 for all supply piles
      672:  484:    for (i = 0; i <= treasure_map; i++)
        -:  485:    {
      648:  486:        state->embargoTokens[i] = 0;
        -:  487:    }
        -:  488:
        -:  489:    //initialize first player's turn
       24:  490:    state->outpostPlayed = 0;
       24:  491:    state->phase = 0;
       24:  492:    state->numActions = 1;
       24:  493:    state->numBuys = 1;
       24:  494:    state->playedCardCount = 0;
       24:  495:    state->whoseTurn = 0;
       24:  496:    state->handCount[state->whoseTurn] = 0;
        -:  497:    //int it; move to top
        -:  498:
        -:  499:    //Moved draw cards to here, only drawing at the start of a turn
      144:  500:    for (it = 0; it < 5; it++) {
      120:  501:        drawCard(state->whoseTurn, state);
        -:  502:    }
        -:  503:
       24:  504:    updateCoins(state->whoseTurn, state, 0);
        -:  505:
       24:  506:    return 0;
        -:  507:}
        -:  508:
       48:  509:int shuffle(int player, struct gameState *state) {
        -:  510:
        -:  511:
        -:  512:    int newDeck[MAX_DECK];
       48:  513:    int newDeckPos = 0;
        -:  514:    int card;
        -:  515:    int i;
        -:  516:
       48:  517:    if (state->deckCount[player] < 1)
    #####:  518:        return -1;
       48:  519:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  520:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  521:
      576:  522:    while (state->deckCount[player] > 0) {
      480:  523:        card = floor(Random() * state->deckCount[player]);
      480:  524:        newDeck[newDeckPos] = state->deck[player][card];
      480:  525:        newDeckPos++;
     1656:  526:        for (i = card; i < state->deckCount[player]-1; i++) {
     1176:  527:            state->deck[player][i] = state->deck[player][i+1];
        -:  528:        }
      480:  529:        state->deckCount[player]--;
        -:  530:    }
      528:  531:    for (i = 0; i < newDeckPos; i++) {
      480:  532:        state->deck[player][i] = newDeck[i];
      480:  533:        state->deckCount[player]++;
        -:  534:    }
        -:  535:
       48:  536:    return 0;
        -:  537:}
        -:  538:
    #####:  539:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  540:{
        -:  541:    int card;
    #####:  542:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  543:
        -:  544:    //check if it is the right phase
    #####:  545:    if (state->phase != 0)
        -:  546:    {
    #####:  547:        return -1;
        -:  548:    }
        -:  549:
        -:  550:    //check if player has enough actions
    #####:  551:    if ( state->numActions < 1 )
        -:  552:    {
    #####:  553:        return -1;
        -:  554:    }
        -:  555:
        -:  556:    //get card played
    #####:  557:    card = handCard(handPos, state);
        -:  558:
        -:  559:    //check if selected card is an action
    #####:  560:    if ( card < adventurer || card > treasure_map )
        -:  561:    {
    #####:  562:        return -1;
        -:  563:    }
        -:  564:
        -:  565:    //play card
    #####:  566:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  567:    {
    #####:  568:        return -1;
        -:  569:    }
        -:  570:
        -:  571:    //reduce number of actions
    #####:  572:    state->numActions--;
        -:  573:
        -:  574:    //update coins (Treasure cards may be added with card draws)
    #####:  575:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  576:
    #####:  577:    return 0;
        -:  578:}
        -:  579:
    #####:  580:int buyCard(int supplyPos, struct gameState *state) {
        -:  581:    int who;
        -:  582:    if (DEBUG) {
        -:  583:        printf("Entering buyCard...\n");
        -:  584:    }
        -:  585:
        -:  586:    // I don't know what to do about the phase thing.
        -:  587:
    #####:  588:    who = state->whoseTurn;
        -:  589:
    #####:  590:    if (state->numBuys < 1) {
        -:  591:        if (DEBUG)
        -:  592:            printf("You do not have any buys left\n");
    #####:  593:        return -1;
    #####:  594:    } else if (supplyCount(supplyPos, state) <1) {
        -:  595:        if (DEBUG)
        -:  596:            printf("There are not any of that type of card left\n");
    #####:  597:        return -1;
    #####:  598:    } else if (state->coins < getCost(supplyPos)) {
        -:  599:        if (DEBUG)
        -:  600:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  601:        return -1;
        -:  602:    } else {
    #####:  603:        state->phase=1;
        -:  604:        //state->supplyCount[supplyPos]--;
    #####:  605:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  606:
    #####:  607:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  608:        state->numBuys--;
        -:  609:        if (DEBUG)
        -:  610:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  611:    }
        -:  612:
        -:  613:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  614:    //state->discardCount[who]++;
        -:  615:
    #####:  616:    return 0;
        -:  617:}
        -:  618:
    #####:  619:int numHandCards(struct gameState *state) {
    #####:  620:    return state->handCount[ whoseTurn(state) ];
        -:  621:}
        -:  622:
    #####:  623:int handCard(int handPos, struct gameState *state) {
    #####:  624:    int currentPlayer = whoseTurn(state);
    #####:  625:    return state->hand[currentPlayer][handPos];
        -:  626:}
        -:  627:
       12:  628:int supplyCount(int card, struct gameState *state) {
       12:  629:    return state->supplyCount[card];
        -:  630:}
        -:  631:
    #####:  632:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  633:    int i;
    #####:  634:    int count = 0;
        -:  635:
    #####:  636:    for (i = 0; i < state->deckCount[player]; i++)
        -:  637:    {
    #####:  638:        if (state->deck[player][i] == card) count++;
        -:  639:    }
        -:  640:
    #####:  641:    for (i = 0; i < state->handCount[player]; i++)
        -:  642:    {
    #####:  643:        if (state->hand[player][i] == card) count++;
        -:  644:    }
        -:  645:
    #####:  646:    for (i = 0; i < state->discardCount[player]; i++)
        -:  647:    {
    #####:  648:        if (state->discard[player][i] == card) count++;
        -:  649:    }
        -:  650:
    #####:  651:    return count;
        -:  652:}
        -:  653:
       52:  654:int whoseTurn(struct gameState *state) {
       52:  655:    return state->whoseTurn;
        -:  656:}
        -:  657:
    #####:  658:int endTurn(struct gameState *state) {
        -:  659:    int k;
        -:  660:    int i;
    #####:  661:    int currentPlayer = whoseTurn(state);
        -:  662:
        -:  663:    //Discard hand
    #####:  664:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  665:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  666:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  667:    }
    #####:  668:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  669:
        -:  670:    //Code for determining the player
    #####:  671:    if (currentPlayer < (state->numPlayers - 1)) {
    #####:  672:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  673:    }
        -:  674:    else {
    #####:  675:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  676:    }
        -:  677:
    #####:  678:    state->outpostPlayed = 0;
    #####:  679:    state->phase = 0;
    #####:  680:    state->numActions = 1;
    #####:  681:    state->coins = 0;
    #####:  682:    state->numBuys = 1;
    #####:  683:    state->playedCardCount = 0;
    #####:  684:    state->handCount[state->whoseTurn] = 0;
        -:  685:
        -:  686:    //int k; move to top
        -:  687:    //Next player draws hand
    #####:  688:    for (k = 0; k < 5; k++) {
    #####:  689:        drawCard(state->whoseTurn, state);//Draw a card
        -:  690:    }
        -:  691:
        -:  692:    //Update money
    #####:  693:    updateCoins(state->whoseTurn, state, 0);
        -:  694:
    #####:  695:    return 0;
        -:  696:}
        -:  697:
    #####:  698:int isGameOver(struct gameState *state) {
        -:  699:    int i;
        -:  700:    int j;
        -:  701:
        -:  702:    //if stack of Province cards is empty, the game ends
    #####:  703:    if (state->supplyCount[province] == 0)
        -:  704:    {
    #####:  705:        return 1;
        -:  706:    }
        -:  707:
        -:  708:    //if three supply pile are at 0, the game ends
    #####:  709:    j = 0;
    #####:  710:    for (i = 0; i < 25; i++)
        -:  711:    {
    #####:  712:        if (state->supplyCount[i] == 0)
        -:  713:        {
    #####:  714:            j++;
        -:  715:        }
        -:  716:    }
    #####:  717:    if ( j >= 3)
        -:  718:    {
    #####:  719:        return 1;
        -:  720:    }
        -:  721:
    #####:  722:    return 0;
        -:  723:}
        -:  724:
    #####:  725:int scoreFor (int player, struct gameState *state) {
        -:  726:
        -:  727:    int i;
    #####:  728:    int score = 0;
        -:  729:    //score from hand
    #####:  730:    for (i = 0; i < state->handCount[player]; i++)
        -:  731:    {
    #####:  732:        if (state->hand[player][i] == curse) {
    #####:  733:            score = score - 1;
        -:  734:        };
    #####:  735:        if (state->hand[player][i] == estate) {
    #####:  736:            score = score + 1;
        -:  737:        };
    #####:  738:        if (state->hand[player][i] == duchy) {
    #####:  739:            score = score + 3;
        -:  740:        };
    #####:  741:        if (state->hand[player][i] == province) {
    #####:  742:            score = score + 6;
        -:  743:        };
    #####:  744:        if (state->hand[player][i] == great_hall) {
    #####:  745:            score = score + 1;
        -:  746:        };
    #####:  747:        if (state->hand[player][i] == gardens) {
    #####:  748:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  749:        };
        -:  750:    }
        -:  751:
        -:  752:    //score from discard
    #####:  753:    for (i = 0; i < state->discardCount[player]; i++)
        -:  754:    {
    #####:  755:        if (state->discard[player][i] == curse) {
    #####:  756:            score = score - 1;
        -:  757:        };
    #####:  758:        if (state->discard[player][i] == estate) {
    #####:  759:            score = score + 1;
        -:  760:        };
    #####:  761:        if (state->discard[player][i] == duchy) {
    #####:  762:            score = score + 3;
        -:  763:        };
    #####:  764:        if (state->discard[player][i] == province) {
    #####:  765:            score = score + 6;
        -:  766:        };
    #####:  767:        if (state->discard[player][i] == great_hall) {
    #####:  768:            score = score + 1;
        -:  769:        };
    #####:  770:        if (state->discard[player][i] == gardens) {
    #####:  771:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  772:        };
        -:  773:    }
        -:  774:
        -:  775:    //score from deck
    #####:  776:    for (i = 0; i < state->discardCount[player]; i++)
        -:  777:    {
    #####:  778:        if (state->deck[player][i] == curse) {
    #####:  779:            score = score - 1;
        -:  780:        };
    #####:  781:        if (state->deck[player][i] == estate) {
    #####:  782:            score = score + 1;
        -:  783:        };
    #####:  784:        if (state->deck[player][i] == duchy) {
    #####:  785:            score = score + 3;
        -:  786:        };
    #####:  787:        if (state->deck[player][i] == province) {
    #####:  788:            score = score + 6;
        -:  789:        };
    #####:  790:        if (state->deck[player][i] == great_hall) {
    #####:  791:            score = score + 1;
        -:  792:        };
    #####:  793:        if (state->deck[player][i] == gardens) {
    #####:  794:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        -:  795:        };
        -:  796:    }
        -:  797:
    #####:  798:    return score;
        -:  799:}
        -:  800:
    #####:  801:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  802:    int i;
        -:  803:    int j;
        -:  804:    int highScore;
        -:  805:    int currentPlayer;
        -:  806:
        -:  807:    //get score for each player
    #####:  808:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  809:    {
        -:  810:        //set unused player scores to -9999
    #####:  811:        if (i >= state->numPlayers)
        -:  812:        {
    #####:  813:            players[i] = -9999;
        -:  814:        }
        -:  815:        else
        -:  816:        {
    #####:  817:            players[i] = scoreFor (i, state);
        -:  818:        }
        -:  819:    }
        -:  820:
        -:  821:    //find highest score
    #####:  822:    j = 0;
    #####:  823:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  824:    {
    #####:  825:        if (players[i] > players[j])
        -:  826:        {
    #####:  827:            j = i;
        -:  828:        }
        -:  829:    }
    #####:  830:    highScore = players[j];
        -:  831:
        -:  832:    //add 1 to players who had less turns
    #####:  833:    currentPlayer = whoseTurn(state);
    #####:  834:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  835:    {
    #####:  836:        if ( players[i] == highScore && i > currentPlayer )
        -:  837:        {
    #####:  838:            players[i]++;
        -:  839:        }
        -:  840:    }
        -:  841:
        -:  842:    //find new highest score
    #####:  843:    j = 0;
    #####:  844:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  845:    {
    #####:  846:        if ( players[i] > players[j] )
        -:  847:        {
    #####:  848:            j = i;
        -:  849:        }
        -:  850:    }
    #####:  851:    highScore = players[j];
        -:  852:
        -:  853:    //set winners in array to 1 and rest to 0
    #####:  854:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  855:    {
    #####:  856:        if ( players[i] == highScore )
        -:  857:        {
    #####:  858:            players[i] = 1;
        -:  859:        }
        -:  860:        else
        -:  861:        {
    #####:  862:            players[i] = 0;
        -:  863:        }
        -:  864:    }
        -:  865:
    #####:  866:    return 0;
        -:  867:}
        -:  868:
      134:  869:int drawCard(int player, struct gameState *state)
        -:  870:{   int count;
        -:  871:    int deckCounter;
      134:  872:    if (state->deckCount[player] <= 0) { //Deck is empty
        -:  873:
        -:  874:        //Step 1 Shuffle the discard pile back into a deck
        -:  875:        int i;
        -:  876:        //Move discard to deck
    #####:  877:        for (i = 0; i < state->discardCount[player]; i++) {
    #####:  878:            state->deck[player][i] = state->discard[player][i];
    #####:  879:            state->discard[player][i] = -1;
        -:  880:        }
        -:  881:
    #####:  882:        state->deckCount[player] = state->discardCount[player];
    #####:  883:        state->discardCount[player] = 0;//Reset discard
        -:  884:
        -:  885:        //Shufffle the deck
    #####:  886:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  887:
        -:  888:        if (DEBUG) { //Debug statements
        -:  889:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  890:        }
        -:  891:
    #####:  892:        state->discardCount[player] = 0;
        -:  893:
        -:  894:        //Step 2 Draw Card
    #####:  895:        count = state->handCount[player];//Get current player's hand count
        -:  896:
        -:  897:        if (DEBUG) { //Debug statements
        -:  898:            printf("Current hand count: %d\n", count);
        -:  899:        }
        -:  900:
    #####:  901:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  902:
    #####:  903:        if (deckCounter == 0)
    #####:  904:            return -1;
        -:  905:
    #####:  906:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  907:        state->deckCount[player]--;
    #####:  908:        state->handCount[player]++;//Increment hand count
        -:  909:    }
        -:  910:
        -:  911:    else {
      134:  912:        int count = state->handCount[player];//Get current hand count for player
        -:  913:        int deckCounter;
        -:  914:        if (DEBUG) { //Debug statements
        -:  915:            printf("Current hand count: %d\n", count);
        -:  916:        }
        -:  917:
      134:  918:        deckCounter = state->deckCount[player];//Create holder for the deck count
      134:  919:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      134:  920:        state->deckCount[player]--;
      134:  921:        state->handCount[player]++;//Increment hand count
        -:  922:    }
        -:  923:
      134:  924:    return 0;
        -:  925:}
        -:  926:
       12:  927:int getCost(int cardNumber)
        -:  928:{
       12:  929:    switch( cardNumber )
        -:  930:    {
        -:  931:    case curse:
        6:  932:        return 0;
        -:  933:    case estate:
    #####:  934:        return 2;
        -:  935:    case duchy:
    #####:  936:        return 5;
        -:  937:    case province:
    #####:  938:        return 8;
        -:  939:    case copper:
        4:  940:        return 0;
        -:  941:    case silver:
    #####:  942:        return 3;
        -:  943:    case gold:
    #####:  944:        return 6;
        -:  945:    case adventurer:
    #####:  946:        return 6;
        -:  947:    case council_room:
    #####:  948:        return 5;
        -:  949:    case feast:
    #####:  950:        return 4;
        -:  951:    case gardens:
    #####:  952:        return 4;
        -:  953:    case mine:
    #####:  954:        return 5;
        -:  955:    case remodel:
    #####:  956:        return 4;
        -:  957:    case smithy:
    #####:  958:        return 4;
        -:  959:    case village:
    #####:  960:        return 3;
        -:  961:    case baron:
    #####:  962:        return 4;
        -:  963:    case great_hall:
    #####:  964:        return 3;
        -:  965:    case minion:
    #####:  966:        return 5;
        -:  967:    case steward:
    #####:  968:        return 3;
        -:  969:    case tribute:
    #####:  970:        return 5;
        -:  971:    case ambassador:
    #####:  972:        return 3;
        -:  973:    case cutpurse:
    #####:  974:        return 4;
        -:  975:    case embargo:
    #####:  976:        return 2;
        -:  977:    case outpost:
    #####:  978:        return 5;
        -:  979:    case salvager:
    #####:  980:        return 4;
        -:  981:    case sea_hag:
    #####:  982:        return 4;
        -:  983:    case treasure_map:
    #####:  984:        return 4;
        -:  985:    }
        -:  986:
        2:  987:    return -1;
        -:  988:}
        -:  989:
       24:  990:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  991:{
        -:  992:    int i;
        -:  993:    int j;
        -:  994:    int k;
        -:  995:    int x;
        -:  996:    int index;
       24:  997:    int currentPlayer = whoseTurn(state);
       24:  998:    int nextPlayer = currentPlayer + 1;
        -:  999:
        -: 1000:    int temphand[MAX_HAND];// moved above the if statement
       24: 1001:    int drawntreasure=0;
        -: 1002:    int cardDrawn;
       24: 1003:    int z = 0;// this is the counter for the temp hand
       24: 1004:    if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1005:        nextPlayer = 0;
        -: 1006:    }
        -: 1007:
        -: 1008:
        -: 1009:    //uses switch to select card and perform actions
       24: 1010:    switch( card )
        -: 1011:    {
        -: 1012:    case adventurer:
    #####: 1013:        while(drawntreasure<2) {
    #####: 1014:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
    #####: 1015:                shuffle(currentPlayer, state);
        -: 1016:            }
    #####: 1017:            drawCard(currentPlayer, state);
    #####: 1018:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1019:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1020:                drawntreasure++;
        -: 1021:            else {
    #####: 1022:                temphand[z]=cardDrawn;
    #####: 1023:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1024:                z++;
        -: 1025:            }
        -: 1026:        }
    #####: 1027:        while(z-1>=0) {
    #####: 1028:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1029:            z=z-1;
        -: 1030:        }
    #####: 1031:        return 0;
        -: 1032:
        -: 1033:    case council_room:
        -: 1034:        //+4 Cards
    #####: 1035:        for (i = 0; i < 4; i++)
        -: 1036:        {
    #####: 1037:            drawCard(currentPlayer, state);
        -: 1038:        }
        -: 1039:
        -: 1040:        //+1 Buy
    #####: 1041:        state->numBuys++;
        -: 1042:
        -: 1043:        //Each other player draws a card
    #####: 1044:        for (i = 0; i < state->numPlayers; i++)
        -: 1045:        {
    #####: 1046:            if ( i != currentPlayer )
        -: 1047:            {
    #####: 1048:                drawCard(i, state);
        -: 1049:            }
        -: 1050:        }
        -: 1051:
        -: 1052:        //put played card in played card pile
    #####: 1053:        discardCard(handPos, currentPlayer, state, 0);
        -: 1054:
    #####: 1055:        return 0;
        -: 1056:
        -: 1057:    case feast:
        -: 1058:        //gain card with cost up to 5
        -: 1059:        //Backup hand
    #####: 1060:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1061:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1062:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1063:        }
        -: 1064:        //Backup hand
        -: 1065:
        -: 1066:        //Update Coins for Buy
    #####: 1067:        updateCoins(currentPlayer, state, 5);
    #####: 1068:        x = 1;//Condition to loop on
    #####: 1069:        while( x == 1) {//Buy one card
    #####: 1070:            if (supplyCount(choice1, state) <= 0) {
        -: 1071:                if (DEBUG)
        -: 1072:                    printf("None of that card left, sorry!\n");
        -: 1073:
        -: 1074:                if (DEBUG) {
        -: 1075:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1076:                }
        -: 1077:            }
    #####: 1078:            else if (state->coins < getCost(choice1)) {
    #####: 1079:                printf("That card is too expensive!\n");
        -: 1080:
        -: 1081:                if (DEBUG) {
        -: 1082:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1083:                }
        -: 1084:            }
        -: 1085:            else {
        -: 1086:
        -: 1087:                if (DEBUG) {
        -: 1088:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1089:                }
        -: 1090:
    #####: 1091:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1092:                x = 0;//No more buying cards
        -: 1093:
        -: 1094:                if (DEBUG) {
        -: 1095:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1096:                }
        -: 1097:
        -: 1098:            }
        -: 1099:        }
        -: 1100:
        -: 1101:        //Reset Hand
    #####: 1102:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1103:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1104:            temphand[i] = -1;
        -: 1105:        }
        -: 1106:        //Reset Hand
        -: 1107:
    #####: 1108:        return 0;
        -: 1109:
        -: 1110:    case gardens:
    #####: 1111:        return -1;
        -: 1112:
        -: 1113:    case mine:
        4: 1114:		mineCardEffect(choice1, choice2, state, handPos);
        -: 1115:
        -: 1116:    case remodel:
        4: 1117:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1118:
        4: 1119:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1120:        {
        4: 1121:            return -1;
        -: 1122:        }
        -: 1123:
    #####: 1124:        gainCard(choice2, state, 0, currentPlayer);
        -: 1125:
        -: 1126:        //discard card from hand
    #####: 1127:        discardCard(handPos, currentPlayer, state, 0);
        -: 1128:
        -: 1129:        //discard trashed card
    #####: 1130:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:        {
    #####: 1132:            if (state->hand[currentPlayer][i] == j)
        -: 1133:            {
    #####: 1134:                discardCard(i, currentPlayer, state, 0);
    #####: 1135:                break;
        -: 1136:            }
        -: 1137:        }
        -: 1138:
        -: 1139:
    #####: 1140:        return 0;
        -: 1141:
        -: 1142:    case smithy:
        -: 1143:        //+3 Cards
    #####: 1144:        for (i = 0; i < 3; i++)
        -: 1145:        {
    #####: 1146:            drawCard(currentPlayer, state);
        -: 1147:        }
        -: 1148:
        -: 1149:        //discard card from hand
    #####: 1150:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1151:        return 0;
        -: 1152:
        -: 1153:    case village:
        -: 1154:        //+1 Card
    #####: 1155:        drawCard(currentPlayer, state);
        -: 1156:
        -: 1157:        //+2 Actions
    #####: 1158:        state->numActions = state->numActions + 2;
        -: 1159:
        -: 1160:        //discard played card from hand
    #####: 1161:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1162:        return 0;
        -: 1163:
        -: 1164:    case baron:
        6: 1165:		baronCardEffect(choice1, state);
        -: 1166:        
        -: 1167:    case great_hall:
        -: 1168:        //+1 Card
        6: 1169:        drawCard(currentPlayer, state);
        -: 1170:
        -: 1171:        //+1 Actions
        6: 1172:        state->numActions++;
        -: 1173:
        -: 1174:        //discard card from hand
        6: 1175:        discardCard(handPos, currentPlayer, state, 0);
        6: 1176:        return 0;
        -: 1177:
        -: 1178:    case minion:
        4: 1179:		minionCardEffect(choice1, choice2, state, handPos);
        -: 1180:
        -: 1181:    case steward:
        4: 1182:        if (choice1 == 1)
        -: 1183:        {
        -: 1184:            //+2 cards
        2: 1185:            drawCard(currentPlayer, state);
        2: 1186:            drawCard(currentPlayer, state);
        -: 1187:        }
        2: 1188:        else if (choice1 == 2)
        -: 1189:        {
        -: 1190:            //+2 coins
    #####: 1191:            state->coins = state->coins + 2;
        -: 1192:        }
        -: 1193:        else
        -: 1194:        {
        -: 1195:            //trash 2 cards in hand
        2: 1196:            discardCard(choice2, currentPlayer, state, 1);
        2: 1197:            discardCard(choice3, currentPlayer, state, 1);
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard card from hand
        4: 1201:        discardCard(handPos, currentPlayer, state, 0);
        4: 1202:        return 0;
        -: 1203:
        -: 1204:    case tribute:
        4: 1205:		tributeCardEffect(state);
        -: 1206:
        -: 1207:    case ambassador:
       10: 1208:		ambassadorCardEffect(choice1, choice2, state, handPos);
        -: 1209:
        -: 1210:    case cutpurse:
       10: 1211:        updateCoins(currentPlayer, state, 2);
       30: 1212:        for (i = 0; i < state->numPlayers; i++)
        -: 1213:        {
       20: 1214:            if (i != currentPlayer)
        -: 1215:            {
       10: 1216:                for (j = 0; j < state->handCount[i]; j++)
        -: 1217:                {
    #####: 1218:                    if (state->hand[i][j] == copper)
        -: 1219:                    {
    #####: 1220:                        discardCard(j, i, state, 0);
    #####: 1221:                        break;
        -: 1222:                    }
    #####: 1223:                    if (j == state->handCount[i])
        -: 1224:                    {
    #####: 1225:                        for (k = 0; k < state->handCount[i]; k++)
        -: 1226:                        {
        -: 1227:                            if (DEBUG)
        -: 1228:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1229:                        }
    #####: 1230:                        break;
        -: 1231:                    }
        -: 1232:                }
        -: 1233:
        -: 1234:            }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
       10: 1239:        discardCard(handPos, currentPlayer, state, 0);
        -: 1240:
       10: 1241:        return 0;
        -: 1242:
        -: 1243:
        -: 1244:    case embargo:
        -: 1245:        //+2 Coins
    #####: 1246:        state->coins = state->coins + 2;
        -: 1247:
        -: 1248:        //see if selected pile is in play
    #####: 1249:        if ( state->supplyCount[choice1] == -1 )
        -: 1250:        {
    #####: 1251:            return -1;
        -: 1252:        }
        -: 1253:
        -: 1254:        //add embargo token to selected supply pile
    #####: 1255:        state->embargoTokens[choice1]++;
        -: 1256:
        -: 1257:        //trash card
    #####: 1258:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1259:        return 0;
        -: 1260:
        -: 1261:    case outpost:
        -: 1262:        //set outpost flag
    #####: 1263:        state->outpostPlayed++;
        -: 1264:
        -: 1265:        //discard card
    #####: 1266:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1267:        return 0;
        -: 1268:
        -: 1269:    case salvager:
        -: 1270:        //+1 buy
    #####: 1271:        state->numBuys++;
        -: 1272:
    #####: 1273:        if (choice1)
        -: 1274:        {
        -: 1275:            //gain coins equal to trashed card
    #####: 1276:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1277:            //trash card
    #####: 1278:            discardCard(choice1, currentPlayer, state, 1);
        -: 1279:        }
        -: 1280:
        -: 1281:        //discard card
    #####: 1282:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1283:        return 0;
        -: 1284:
        -: 1285:    case sea_hag:
    #####: 1286:        for (i = 0; i < state->numPlayers; i++) {
    #####: 1287:            if (i != currentPlayer) {
    #####: 1288:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1289:                state->deckCount[i]--;
    #####: 1290:                state->discardCount[i]++;
    #####: 1291:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1292:            }
        -: 1293:        }
    #####: 1294:        return 0;
        -: 1295:
        -: 1296:    case treasure_map:
        -: 1297:        //search hand for another treasure_map
    #####: 1298:        index = -1;
    #####: 1299:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1300:        {
    #####: 1301:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1302:            {
    #####: 1303:                index = i;
    #####: 1304:                break;
        -: 1305:            }
        -: 1306:        }
    #####: 1307:        if (index > -1)
        -: 1308:        {
        -: 1309:            //trash both treasure cards
    #####: 1310:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1311:            discardCard(index, currentPlayer, state, 1);
        -: 1312:
        -: 1313:            //gain 4 Gold cards
    #####: 1314:            for (i = 0; i < 4; i++)
        -: 1315:            {
    #####: 1316:                gainCard(gold, state, 1, currentPlayer);
        -: 1317:            }
        -: 1318:
        -: 1319:            //return success
    #####: 1320:            return 1;
        -: 1321:        }
        -: 1322:
        -: 1323:        //no second treasure_map found in hand
    #####: 1324:        return -1;
        -: 1325:    }
        -: 1326:
    #####: 1327:    return -1;
        -: 1328:}
        -: 1329:
       28: 1330:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1331:{
        -: 1332:
        -: 1333:    //if card is not trashed, added to Played pile
       28: 1334:    if (trashFlag < 1)
        -: 1335:    {
        -: 1336:        //add card to played pile
       24: 1337:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       24: 1338:        state->playedCardCount++;
        -: 1339:    }
        -: 1340:
        -: 1341:    //set played card to -1
       28: 1342:    state->hand[currentPlayer][handPos] = -1;
        -: 1343:
        -: 1344:    //remove card from player's hand
       28: 1345:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1346:    {
        -: 1347:        //reduce number of cards in hand
       12: 1348:        state->handCount[currentPlayer]--;
        -: 1349:    }
       16: 1350:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1351:    {
        -: 1352:        //reduce number of cards in hand
        2: 1353:        state->handCount[currentPlayer]--;
        -: 1354:    }
        -: 1355:    else
        -: 1356:    {
        -: 1357:        //replace discarded card with last card in hand
       14: 1358:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1359:        //set last card to -1
       14: 1360:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1361:        //reduce number of cards in hand
       14: 1362:        state->handCount[currentPlayer]--;
        -: 1363:    }
        -: 1364:
       28: 1365:    return 0;
        -: 1366:}
        -: 1367:
        8: 1368:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1369:{
        -: 1370:    //Note: supplyPos is enum of choosen card
        -: 1371:
        -: 1372:    //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1373:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1374:    {
        2: 1375:        return -1;
        -: 1376:    }
        -: 1377:
        -: 1378:    //added card for [whoseTurn] current player:
        -: 1379:    // toFlag = 0 : add to discard
        -: 1380:    // toFlag = 1 : add to deck
        -: 1381:    // toFlag = 2 : add to hand
        -: 1382:
        6: 1383:    if (toFlag == 1)
        -: 1384:    {
    #####: 1385:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1386:        state->deckCount[player]++;
        -: 1387:    }
        6: 1388:    else if (toFlag == 2)
        -: 1389:    {
    #####: 1390:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1391:        state->handCount[player]++;
        -: 1392:    }
        -: 1393:    else
        -: 1394:    {
        6: 1395:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1396:        state->discardCount[player]++;
        -: 1397:    }
        -: 1398:
        -: 1399:    //decrease number in supply pile
        6: 1400:    state->supplyCount[supplyPos]--;
        -: 1401:
        6: 1402:    return 0;
        -: 1403:}
        -: 1404:
       34: 1405:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1406:{
        -: 1407:    int i;
        -: 1408:
        -: 1409:    //reset coin count
       34: 1410:    state->coins = 0;
        -: 1411:
        -: 1412:    //add coins for each Treasure card in player's hand
      172: 1413:    for (i = 0; i < state->handCount[player]; i++)
        -: 1414:    {
      138: 1415:        if (state->hand[player][i] == copper)
        -: 1416:        {
       72: 1417:            state->coins += 1;
        -: 1418:        }
       66: 1419:        else if (state->hand[player][i] == silver)
        -: 1420:        {
    #####: 1421:            state->coins += 2;
        -: 1422:        }
       66: 1423:        else if (state->hand[player][i] == gold)
        -: 1424:        {
    #####: 1425:            state->coins += 3;
        -: 1426:        }
        -: 1427:    }
        -: 1428:
        -: 1429:    //add bonus
       34: 1430:    state->coins += bonus;
        -: 1431:
       34: 1432:    return 0;
        -: 1433:}
        -: 1434:
        -: 1435://end of dominion.c
