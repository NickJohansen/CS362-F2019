        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10://bug: for loop starts at 1 not 0, discards 1st cart not 0th
        -:   11:
        1:   12:int main (int argc, char** argv){
        1:   13:	int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };// declarethe game state
        -:   14:	struct gameState game1;// declarethe arrays 
        -:   15:	struct gameState game2;
        1:   16:	int seed = 38;
        -:   17:	int c1;
        -:   18:	int c2;
        -:   19:	int c3;
        -:   20:	int hand;
        1:   21:	int* bonasu = 0;
        -:   22:	
        1:   23:	printf("Begin Testing do_mine():\n");
        -:   24://
        -:   25:// set the state of your variables
        -:   26:// comment on what this is going totest
        -:   27://
        1:   28:	memset(&game1, 23, sizeof(struct gameState));   // set the game state 
        1:   29:	int r1 = initializeGame(2, k, seed, &game1); // initialize a new game
        1:   30:	c1 = 1;
        1:   31:	c2 = 0;
        1:   32:	c2 = 0;
        1:   33:	hand = 0;
        1:   34:	game1.numPlayers = 2;
        1:   35:	game1.whoseTurn = 0;
        1:   36:	game1.numActions = 1;
        1:   37:	game1.numBuys = 1;
        1:   38:	game1.coins = 10;
        1:   39:	game1.hand[0][0] = silver;
        1:   40:	game1.handCount[0] = 1; // set any other variables
        -:   41:	//cardEffect(estate, c1, c2, c3, game1, hand,bonasu);
        1:   42:	if(cardEffect(mine, c1, c2, c3, &game1, hand,bonasu) == -1){
        1:   43:		printf("Test for wrong card Passed [PASS]\n");
        -:   44:	}
        -:   45:	else{
    #####:   46:		printf("Test for wrong card Failed [FAIL]\n");
        -:   47:	}
        -:   48:
        -:   49:	// verify that your assertspass, for the bugs your asserts may fail
        -:   50:	
        -:   51:	//
        -:   52:	// adjustthe state of your variables to continue testing the function
        -:   53:	// comment on what this is going to test
        -:   54:	//
        1:   55:	memset(&game2, 23, sizeof(struct gameState));   // set the game state 
        1:   56:	int r2 = initializeGame(2, k, seed, &game2); // initialize a new game
        1:   57:	c1 = baron;
        1:   58:	c2 = baron;
        1:   59:	c2 = 0;
        1:   60:	hand = 0;
        1:   61:	game2.numPlayers = 2;
        1:   62:	game2.whoseTurn = 0;
        1:   63:	game2.numActions = 1;
        1:   64:	game2.numBuys = 1;
        1:   65:	game2.coins = 10;
        1:   66:	game2.hand[0][0] = mine;
        1:   67:	game2.hand[0][1] = adventurer;
        1:   68:	game2.handCount[0] = 2; // set any other variables
        1:   69:	cardEffect(mine, c1, c2, c3, &game2, hand,bonasu);
        1:   70:	if(game2.handCount[0] == 1){
    #####:   71:		printf("Test for discarding 1 card Passed [PASS]\n");
        -:   72:	}
        -:   73:	else{
        1:   74:		printf("Test for discarding 1 card Failed [FAIL]\n");
        -:   75:	}
        -:   76:	
        1:   77:	if(game2.hand[0][2] == baron){
    #####:   78:		printf("Test for discarding and gaining card Passed [PASS]\n");
        -:   79:	}
        -:   80:	else{
        1:   81:		printf("Test for discarding and gaining card Failed [FAIL]\n");
        -:   82:	}
        -:   83:	
        1:   84:	printf("Testcompleted!\n");
        -:   85:}
