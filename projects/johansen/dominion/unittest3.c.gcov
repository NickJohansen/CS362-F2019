        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <assert.h>
        -:    9:
        -:   10://bug: iterator starts at 1 not 0
        -:   11:
        1:   12:int main (int argc, char** argv){
        1:   13:	int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };// declarethe game state
        -:   14:	struct gameState game1;// declarethe arrays 
        -:   15:	struct gameState game2;
        -:   16:	struct gameState game3;
        1:   17:	int seed = 38;
        -:   18:	int c1;
        -:   19:	int c2;
        -:   20:	int c3;
        -:   21:	int hand;
        1:   22:	int* bonasu = 0;
        -:   23:	
        1:   24:	printf("Begin Testing do_baron():\n");
        -:   25://
        -:   26:// set the state of your variables
        -:   27:// comment on what this is going totest
        -:   28://
        1:   29:	memset(&game1, 23, sizeof(struct gameState));   // set the game state 
        1:   30:	int r1 = initializeGame(2, k, seed, &game1); // initialize a new game
        1:   31:	c1 = -1;
        1:   32:	c2 = 0;
        1:   33:	c2 = 0;
        1:   34:	hand = 0;
        1:   35:	game1.numPlayers = 2;
        1:   36:	game1.whoseTurn = 0;
        1:   37:	game1.numActions = 1;
        1:   38:	game1.numBuys = 1;
        1:   39:	game1.coins = 10;
        1:   40:	game1.hand[0][0] = baron;
        1:   41:	game1.supplyCount[0] = 5;
        1:   42:	game1.handCount[0] = 1; // set any other variables
        1:   43:	cardEffect(baron, c1, c2, c3, &game1, hand, bonasu);
        1:   44:	if(game1.handCount[0] == 2){
    #####:   45:		printf("Test for gaining a card Passed [PASS]\n");
        -:   46:	}
        -:   47:	else{
        1:   48:		printf("Test for gaining a card Failed [FAIL]\n");
        -:   49:	}
        -:   50:// verify that your assertspass, for the bugs your asserts may fail
        -:   51:	
        -:   52:	//
        -:   53:	// adjustthe state of your variables to continue testing the function
        -:   54:	// comment on what this is going to test
        -:   55:	//
        1:   56:	memset(&game2, 23, sizeof(struct gameState));   // set the game state 
        1:   57:	int r2 = initializeGame(2, k, seed, &game2); // initialize a new game
        1:   58:	c1 = 1;
        1:   59:	c2 = 0;
        1:   60:	c2 = 0;
        1:   61:	hand = 0;
        1:   62:	game2.numPlayers = 2;
        1:   63:	game2.whoseTurn = 0;
        1:   64:	game2.numActions = 1;
        1:   65:	game2.numBuys = 1;
        1:   66:	game2.coins = 10;
        1:   67:	game2.hand[0][0] = baron;
        1:   68:	game2.hand[0][1] = estate;
        1:   69:	game2.handCount[0] = 1; // set any other variables
        1:   70:	game2.handCount[1] = 6;
        1:   71:	cardEffect(baron, c1, c2, c3, &game2, hand,bonasu);
        1:   72:	if(game2.coins == 14){
    #####:   73:		printf("Test for getting 4 coins Passed [PASS]\n");
        -:   74:	}
        -:   75:	else{
        1:   76:		printf("Test for getting 4 coins Failed [FAIL]\n");
        -:   77:	}
        1:   78:	if(game2.handCount[1] == 0){
    #####:   79:		printf("Test for estate card found Passed [PASS]\n");
        -:   80:	}
        -:   81:	else{
        1:   82:		printf("Test for estate card found Failed [FAIL]\n");
        -:   83:	}
        -:   84:	
        1:   85:	memset(&game3, 23, sizeof(struct gameState));   // set the game state 
        1:   86:	int r3 = initializeGame(2, k, seed, &game3); // initialize a new game
        1:   87:	c1 = 1;
        1:   88:	c2 = 0;
        1:   89:	c2 = 0;
        1:   90:	hand = 0;
        1:   91:	game3.numPlayers = 2;
        1:   92:	game3.whoseTurn = 0;
        1:   93:	game3.numActions = 1;
        1:   94:	game3.numBuys = 1;
        1:   95:	game3.coins = 10;
        1:   96:	game3.hand[0][0] = estate;
        1:   97:	game3.hand[0][1] = baron;
        1:   98:	game3.handCount[0] = 1; // set any other variables
        1:   99:	game3.handCount[1] = 6;
        1:  100:	game1.supplyCount[0] = 5;
        1:  101:	cardEffect(baron, c1, c2, c3, &game3, hand,bonasu);
        1:  102:	if(game3.hand[0][0] == estate){
    #####:  103:		printf("Test for discarding estate Failed [FAIL]\n");
        -:  104:	}
        -:  105:	else{
        1:  106:		printf("Test for discarding estate Passed [PASS]\n");
        -:  107:	}
        -:  108:	
        1:  109:	if(game1.supplyCount[0] == 4){
    #####:  110:		printf("Test for supply decrement Passed [PASS]\n");
        -:  111:	}
        -:  112:	else{
        1:  113:		printf("Test for supply decrement Failed [FAIL]\n");
        -:  114:	}
        -:  115:	
        1:  116:	printf("Testcompleted!\n");
        -:  117:}
